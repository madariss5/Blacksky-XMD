const config = require('../config');
const logger = require('pino')();

const basicCommands = {
    menu: async (sock, msg) => {
        try {
            const menuHeader = `‚ï≠‚îÅ‚îÅ‚îÅ‚ù∞ *${config.botName}* ‚ù±‚îÅ‚îÅ‚îÅ‚ä∑‚ùç
‚îÉ Creator: @${config.ownerNumber.split('@')[0]}
‚îÉ Prefix: ${config.prefix}
‚îÉ Status: Online
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ä∑‚ùç\n\n`;

            // Get all commands
            const allCommands = Object.entries(config.commands);

            // Define categories with their commands
            const categories = {
                '‚öôÔ∏è *BASIC COMMANDS*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'Basic')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'üé® *MEDIA & STICKERS*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'Media')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'üì• *DOWNLOADER*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'Downloader')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'üéµ *MUSIC*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'Music')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'ü§ñ *AI & GENERATION*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'AI')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'üë• *GROUP MANAGEMENT*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'Group')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'üéÆ *FUN & REACTIONS*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'Fun')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'üí∞ *ECONOMY*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'Economy')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'üõ†Ô∏è *UTILITY*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'Utility')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'üëë *OWNER*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'Owner')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`),

                'üîû *NSFW*': allCommands
                    .filter(([_, cmd]) => cmd.category === 'NSFW')
                    .map(([cmd, info]) => `${cmd} ‚û† ${info.description}`)
            };

            let menuContent = menuHeader;

            // Add categories and their commands
            Object.entries(categories).forEach(([category, commands]) => {
                if (commands.length > 0) {
                    menuContent += `${category}\n${'-'.repeat(40)}\n`;
                    commands.forEach(cmd => {
                        menuContent += `‚óà ${cmd}\n`;
                    });
                    menuContent += '\n';
                }
            });

            // Add footer stats
            menuContent += `‚ï≠‚îÅ‚îÅ‚îÅ‚ù∞ *STATS* ‚ù±‚îÅ‚îÅ‚îÅ‚ä∑‚ùç
‚îÉ Total Commands: ${Object.keys(config.commands).length}
‚îÉ Version: 1.0.0
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ä∑‚ùç\n\n`;

            menuContent += `Note: Add ${config.prefix} before any command\n`;
            menuContent += `Example: ${config.prefix}help ytmp3`;

            // Send as a single message
            await sock.sendMessage(msg.key.remoteJid, {
                text: menuContent,
                mentions: [config.ownerNumber]
            });

        } catch (error) {
            logger.error('Error in menu command:', error);
            await sock.sendMessage(msg.key.remoteJid, {
                text: '‚ùå Error displaying menu: ' + error.message
            });
        }
    },

    help: async (sock, msg, args) => {
        try {
            if (!args[0]) {
                return await sock.sendMessage(msg.key.remoteJid, {
                    text: `‚ùì Please specify a command for help!\nExample: ${config.prefix}help ytmp3`
                });
            }

            const command = args[0].toLowerCase();
            const cmdInfo = config.commands[command];

            if (!cmdInfo) {
                return await sock.sendMessage(msg.key.remoteJid, {
                    text: `‚ùå Command "${command}" not found!`
                });
            }

            await sock.sendMessage(msg.key.remoteJid, {
                text: `*Command: ${config.prefix}${command}*\n\n` +
                      `üìù Description: ${cmdInfo.description}\n` +
                      `‚ÑπÔ∏è Category: ${cmdInfo.category || 'General'}\n` +
                      `üîû NSFW: ${cmdInfo.nsfw ? 'Yes' : 'No'}`
            });
        } catch (error) {
            logger.error('Error in help command:', error);
            await sock.sendMessage(msg.key.remoteJid, {
                text: '‚ùå Error displaying help: ' + error.message
            });
        }
    },

    ping: async (sock, msg) => {
        try {
            const start = Date.now();
            await sock.sendMessage(msg.key.remoteJid, { text: 'üì° Testing connection...' });
            const end = Date.now();

            const latency = end - start;
            const status = latency < 100 ? 'üü¢ Excellent' : latency < 200 ? 'üü° Good' : 'üî¥ High';

            await sock.sendMessage(msg.key.remoteJid, {
                text: `üöÄ Status Report\n\n` +
                      `Response Time: ${latency}ms\n` +
                      `Connection: ${status}`
            });
        } catch (error) {
            logger.error('Error in ping command:', error);
            await sock.sendMessage(msg.key.remoteJid, {
                text: '‚ùå Error checking ping: ' + error.message
            });
        }
    },

    info: async (sock, msg) => {
        try {
            const info = `*Bot Information*\n\n` +
                        `‚Ä¢ Name: ${config.botName}\n` +
                        `‚Ä¢ Owner: @${config.ownerNumber.split('@')[0]}\n` +
                        `‚Ä¢ Prefix: ${config.prefix}\n` +
                        `‚Ä¢ Version: 1.0.0\n` +
                        `‚Ä¢ Commands: ${Object.keys(config.commands).length}\n` +
                        `‚Ä¢ Status: Online`;

            await sock.sendMessage(msg.key.remoteJid, {
                text: info,
                mentions: [config.ownerNumber]
            });
        } catch (error) {
            logger.error('Error in info command:', error);
            await sock.sendMessage(msg.key.remoteJid, {
                text: '‚ùå Error displaying info: ' + error.message
            });
        }
    }
};

module.exports = basicCommands;