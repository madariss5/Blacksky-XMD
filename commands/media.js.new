const config = require('../config');
const { downloadMediaMessage } = require('@whiskeysockets/baileys');
const logger = require('pino')();
const fs = require('fs-extra');
const path = require('path');
const { exec } = require('child_process');
const ffmpeg = require('fluent-ffmpeg');
const axios = require('axios');
const gtts = require('node-gtts');
const yts = require('yt-search');
const ytdl = require('@distube/ytdl-core');

// Add error handling for libuuid.so.1 dependency
try {
    const { createCanvas, loadImage } = require('canvas');
} catch (error) {
    logger.warn('Canvas module not loaded properly:', error);
}

// Ensure temp directory exists
const tempDir = path.join(__dirname, '../temp');
fs.ensureDirSync(tempDir);

// Helper function to convert image to WebP using Python script
const convertToWebp = async (inputPath, outputPath) => {
    return new Promise((resolve, reject) => {
        const pythonScript = path.join(__dirname, '../scripts/convert_sticker.py');
        exec(`python3 "${pythonScript}" "${inputPath}" "${outputPath}"`, (error, stdout, stderr) => {
            if (error) {
                logger.error('Python conversion error:', error);
                logger.error('stderr:', stderr);
                reject(error);
            } else {
                resolve();
            }
        });
    });
};

// Add enhanced logging to downloadMediaMessage function 
const downloadMediaMessageWithLogging = async (messageInfo, type, options, downloadOptions) => {
    logger.info('Starting media download:', {
        type: type,
        messageType: Object.keys(messageInfo.message)[0],
        messageTimestamp: messageInfo.messageTimestamp
    });

    try {
        const buffer = await downloadMediaMessage(
            messageInfo,
            type,
            options,
            downloadOptions
        );
        logger.info('Media download completed successfully', {
            bufferSize: buffer.length
        });
        return buffer;
    } catch (error) {
        logger.error('Media download failed:', {
            error: error.message,
            stack: error.stack,
            messageInfo: {
                type: type,
                messageType: Object.keys(messageInfo.message)[0]
            }
        });
        throw error;
    }
};

// Add enhanced logging to ImageMagick execution
const executeImageMagick = async (command, inputPath, outputPath) => {
    logger.info('Executing ImageMagick command:', {
        command: command,
        input: inputPath,
        output: outputPath,
        timestamp: new Date().toISOString()
    });

    try {
        await new Promise((resolve, reject) => {
            const startTime = Date.now();
            exec(command, (error, stdout, stderr) => {
                const duration = Date.now() - startTime;
                if (error) {
                    logger.error('ImageMagick execution failed:', {
                        error: error,
                        stdout: stdout,
                        stderr: stderr,
                        duration: duration,
                        command: command
                    });
                    reject(error);
                } else {
                    logger.info('ImageMagick execution completed successfully', {
                        duration: duration,
                        hasStdout: !!stdout,
                        hasStderr: !!stderr
                    });
                    resolve();
                }
            });
        });
    } catch (error) {
        logger.error('ImageMagick execution error:', {
            error: error.message,
            stack: error.stack,
            command: command
        });
        throw error;
    }
};

// Add file cleanup helper with logging
async function cleanupTempFiles(...filePaths) {
    logger.info('Starting cleanup of temporary files:', {
        files: filePaths
    });

    try {
        for (const filePath of filePaths) {
            if (await fs.pathExists(filePath)) {
                await fs.remove(filePath);
                logger.info('Successfully removed temp file:', {
                    file: filePath
                });
            }
        }
    } catch (error) {
        logger.error('Error during file cleanup:', {
            error: error.message,
            stack: error.stack,
            files: filePaths
        });
        // Don't throw - we don't want cleanup failures to affect command response
    }
}

const mediaCommands = {
    meme: async (sock, msg) => {
        try {
            await sock.sendMessage(msg.key.remoteJid, {
                text: 'üé≠ Fetching a random meme...'
            });

            // Use multiple meme subreddits for variety
            const subreddits = ['memes', 'dankmemes', 'wholesomememes', 'me_irl'];
            const randomSubreddit = subreddits[Math.floor(Math.random() * subreddits.length)];
            
            // Fetch meme from Reddit JSON API
            const response = await axios.get(`https://www.reddit.com/r/${randomSubreddit}/random.json`);
            
            if (!response.data || !response.data[0]?.data?.children?.length) {
                throw new Error('Failed to fetch meme from Reddit');
            }

            const post = response.data[0].data.children[0].data;
            
            // Skip if NSFW or if no media URL
            if (post.over_18 || !post.url) {
                return await sock.sendMessage(msg.key.remoteJid, {
                    text: '‚ùå Failed to get appropriate meme, please try again.'
                });
            }

            // Handle different media types
            const mediaUrl = post.url;
            const isGif = mediaUrl.endsWith('.gif') || post.is_video;
            const title = post.title || 'Random Meme';

            if (isGif) {
                // Handle GIFs and videos
                const timestamp = Date.now();
                const outputPath = path.join(tempDir, `meme_${timestamp}.mp4`);

                // Download and convert if needed
                const mediaResponse = await axios.get(mediaUrl, { responseType: 'arraybuffer' });
                await fs.writeFile(outputPath, mediaResponse.data);

                await sock.sendMessage(msg.key.remoteJid, {
                    video: fs.readFileSync(outputPath),
                    caption: `üé≠ ${title}`,
                    gifPlayback: true
                });

                await fs.remove(outputPath);
            } else {
                // Handle static images
                await sock.sendMessage(msg.key.remoteJid, {
                    image: { url: mediaUrl },
                    caption: `üé≠ ${title}`
                });
            }

        } catch (error) {
            logger.error('Error in meme command:', error);
            await sock.sendMessage(msg.key.remoteJid, {
                text: '‚ùå Failed to fetch meme: ' + error.message
            });
        }
    },

    video: async (sock, msg, args) => {
        try {
            if (!args.length) {
                return await sock.sendMessage(msg.key.remoteJid, {
                    text: '‚ùå Please provide a video name or YouTube URL!\nUsage: !video <video name/URL>'
                });
            }

            await sock.sendMessage(msg.key.remoteJid, {
                text: 'üîç Searching for your video request...'
            });

            const query = args.join(' ');
            let videoUrl;

            // Check if the argument is a YouTube URL
            if (query.match(/^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/.+$/)) {
                videoUrl = query;
            } else {
                // Search for the video 
                const searchResults = await yts(query);
                if (!searchResults.videos.length) {
                    return await sock.sendMessage(msg.key.remoteJid, {
                        text: '‚ùå No results found!'
                    });
                }
                videoUrl = searchResults.videos[0].url;
            }

            await sock.sendMessage(msg.key.remoteJid, {
                text: '‚è≥ Downloading and processing video...'
            });

            // Get video info
            const info = await ytdl.getInfo(videoUrl);
            const title = info.videoDetails.title;
            const thumbnail = info.videoDetails.thumbnails[0].url;

            // Download video
            const videoStream = ytdl(videoUrl, {
                quality: 'highest',
                filter: 'videoandaudio'
            });

            const timestamp = Date.now();
            const outputPath = path.join(tempDir, `video_${timestamp}.mp4`);

            // Process video using ffmpeg
            await new Promise((resolve, reject) => {
                ffmpeg(videoStream)
                    .toFormat('mp4')
                    .size('480x?') // Resize to 480p width, maintain aspect ratio
                    .on('end', resolve)
                    .on('error', reject)
                    .save(outputPath);
            });

            // Send thumbnail with info
            await sock.sendMessage(msg.key.remoteJid, {
                image: { url: thumbnail },
                caption: `üé• *Downloading*\n\n*${title}*`
            });

            // Send video
            await sock.sendMessage(msg.key.remoteJid, {
                video: fs.readFileSync(outputPath),
                caption: `‚ú® Here's your video: ${title}`,
                mimetype: 'video/mp4'
            });

            // Cleanup
            await fs.remove(outputPath);

        } catch (error) {
            logger.error('Error in video command:', error);
            await sock.sendMessage(msg.key.remoteJid, {
                text: '‚ùå Failed to download video: ' + error.message
            });
        }
    }
};

module.exports = mediaCommands;